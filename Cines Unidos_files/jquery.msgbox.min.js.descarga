/*!
 * jQuery MsgBox - for jQuery 1.3+
 * http://codecanyon.net/item/jquery-msgbox/92626?ref=aeroalquimia
 *
 * Copyright (c) 2013, Eduardo Daniel Sada
 * Released under CodeCanyon Regular License.
 * http://codecanyon.net/licenses/regular
 *
 * Version: 1.3.6 (Mar 02 2013)
 */
(function (n) { var t = !n.support.opacity; n.proxy === undefined && n.extend({ proxy: function (n, t) { return n && (proxy = function () { return n.apply(t || this, arguments) }), proxy } }); n.extend(n.easing, { easeOutBackMin: function (n, t, i, r, u, f) { return f === undefined && (f = 1), r * ((t = t / u - 1) * t * ((f + 1) * t + f) + 1) + i } }); n.extend(n.expr[":"], { value: function (t) { return n(t).val() } }); n.extend({ MsgBoxObject: { defaults: { name: "jquery-msgbox", zIndex: 1e4, width: 420, height: "auto", background: "#FFFFFF", modal: !0, overlay: { "background-color": "#000000", opacity: .5 }, showDuration: 200, closeDuration: 100, moveDuration: 550, shake: { distance: 10, duration: 100, transition: "easeOutBackMin", loops: 2 }, form: { active: !1, action: "#", method: "post" }, emergefrom: "top" }, options: {}, esqueleto: { msgbox: [], wrapper: [], form: [], buttons: [], inputs: [] }, visible: !1, i: 0, animation: !1, config: function (t) { this.options = n.extend(!0, this.options, t); this.overlay.element.css(this.options.overlay); this.overlay.options.hideOnClick = !this.options.modal; this.esqueleto.msgbox.css({ width: this.options.width, height: this.options.height, "background-color": this.options.background }); this.moveBox() }, overlay: { create: function (t) { return this.options = t, this.element = n('<div id="' + (new Date).getTime() + '"><\/div>'), this.element.css(n.extend({}, { position: "fixed", top: 0, left: 0, opacity: 0, display: "none", "z-index": this.options.zIndex }, this.options.style)), this.element.click(n.proxy(function (t) { this.options.hideOnClick && (n.isFunction(this.options.callback) ? this.options.callback() : this.hide()); t.preventDefault() }, this)), this.hidden = !0, this.inject(), this }, inject: function () { var i, r; this.target = n(document.body); this.target.append(this.element); t && (this.element.css({ position: "absolute" }), i = parseInt(this.element.css("zIndex")), i || (i = 1, r = this.element.css("position"), r != "static" && r || this.element.css({ position: "relative" }), this.element.css({ zIndex: i })), i = !!(this.options.zIndex || this.options.zIndex === 0) && i > this.options.zIndex ? this.options.zIndex : i - 1, i < 0 && (i = 1), this.shim = n('<iframe id="IF_' + (new Date).getTime() + '" scrolling="no" frameborder=0 src=""><\/div>'), this.shim.css({ zIndex: i, position: "absolute", top: 0, left: 0, border: "none", width: 0, height: 0, opacity: 0 }), this.shim.insertAfter(this.element), n("html, body").css({ height: "100%", width: "100%", "margin-left": 0, "margin-right": 0 })) }, resize: function (t, i) { this.element.css({ height: 0, width: 0 }); this.shim && this.shim.css({ height: 0, width: 0 }); var r = { x: n(document).width(), y: n(document).height() }; return this.element.css({ width: "100%", height: i ? i : r.y }), this.shim && (this.shim.css({ height: 0, width: 0 }), this.shim.css({ position: "absolute", left: 0, top: 0, width: this.element.width(), height: i ? i : r.y })), this }, show: function () { return this.hidden ? (this.transition && this.transition.stop(), this.target.bind("resize", n.proxy(this.resize, this)), this.resize(), this.shim && this.shim.css({ display: "block" }), this.hidden = !1, this.transition = this.element.fadeIn(this.options.showDuration, n.proxy(function () { this.element.trigger("show") }, this)), this) : this }, hide: function () { return this.hidden ? this : (this.transition && this.transition.stop(), this.target.unbind("resize"), this.shim && this.shim.css({ display: "none" }), this.hidden = !0, this.transition = this.element.fadeOut(this.options.closeDuration, n.proxy(function () { this.element.trigger("hide"); this.element.css({ height: 0, width: 0 }) }, this)), this) } }, create: function () { return this.options = n.extend(!0, this.defaults, this.options), this.overlay.create({ style: this.options.overlay, hideOnClick: !this.options.modal, zIndex: this.options.zIndex - 1, showDuration: this.options.showDuration, closeDuration: this.options.closeDuration }), this.esqueleto.msgbox = n('<div class="' + this.options.name + '"><\/div>'), this.esqueleto.msgbox.css({ display: "none", position: "absolute", top: 0, left: 0, width: this.options.width, height: this.options.height, "z-index": this.options.zIndex, "word-wrap": "break-word", "-moz-box-shadow": "0 0 15px rgba(0, 0, 0, 0.5)", "-webkit-box-shadow": "0 0 15px rgba(0, 0, 0, 0.5)", "box-shadow": "0 0 15px rgba(0, 0, 0, 0.5)", "-moz-border-radius": "6px", "-webkit-border-radius": "6px", "border-radius": "6px", "background-color": this.options.background }), this.esqueleto.wrapper = n('<div class="' + this.options.name + '-wrapper"><\/div>'), this.esqueleto.msgbox.append(this.esqueleto.wrapper), this.esqueleto.form = n('<form action="' + this.options.formaction + '" method="post"><\/form>'), this.esqueleto.wrapper.append(this.esqueleto.form), this.esqueleto.wrapper.css({ height: t ? 80 : "auto", "min-height": 80, zoom: 1 }), n("body").append(this.esqueleto.msgbox), this.addevents(), this.esqueleto.msgbox }, addevents: function () { n(window).bind("resize", n.proxy(function () { this.visible && (this.overlay.resize(), this.moveBox()) }, this)); n(window).bind("scroll", n.proxy(function () { this.visible && this.moveBox() }, this)); this.esqueleto.msgbox.bind("keydown", n.proxy(function (n) { n.keyCode == 27 && this.close(!1) }, this)); this.esqueleto.form.bind("submit", n.proxy(function (t) { n("input[type=submit]:first, button[type=submit]:first, button:first", this.esqueleto.form).trigger("click"); options.form.active || t.preventDefault() }, this)); this.overlay.element.bind("show", n.proxy(function () { n(this).triggerHandler("show") }, this)); this.overlay.element.bind("hide", n.proxy(function () { n(this).triggerHandler("close") }, this)) }, show: function (t, i, r) { var u = ["alert", "info", "error", "prompt", "confirm"]; this.esqueleto.msgbox.queue(this.options.name, n.proxy(function () { var f, e; i = n.extend(!0, { type: "alert", form: { active: !1 } }, i || {}); f = typeof i.buttons == "undefined" ? i.type == "confirm" || i.type == "prompt" ? [{ type: "submit", value: "Aceptar" }, { type: "cancel", value: "Cancelar" }] : [{ type: "submit", value: "Aceptar" }] : i.buttons; e = typeof i.inputs == "undefined" && i.type == "prompt" ? [{ type: "text", name: "prompt", value: "" }] : i.inputs; this.callback = n.isFunction(r) ? r : function () { }; typeof e != "undefined" && (this.esqueleto.inputs = n('<div class="' + this.options.name + '-inputs"><\/div>'), this.esqueleto.form.append(this.esqueleto.inputs), n.each(e, n.proxy(function (t, i) { i.type == "checkbox" ? (iLabel = i.label ? '<label class="' + this.options.name + '-label">' : "", fLabel = i.label ? i.label + "<\/label>" : "", i.value = i.value === undefined ? "1" : i.value, iName = i.name === undefined ? this.options.name + "-label-" + t : i.name, this.esqueleto.inputs.append(n(iLabel + '<input type="' + i.type + '" style="display:inline; width:auto;" name="' + iName + '" value="' + i.value + '" autocomplete="off"/> ' + fLabel))) : (iLabel = i.label ? '<label class="' + this.options.name + '-label">' + i.label : "", fLabel = i.label ? "<\/label>" : "", i.value = i.value === undefined ? "" : i.value, iRequired = i.required === undefined || i.required == !1 ? "" : 'required="true"', iName = i.name === undefined ? this.options.name + "-label-" + t : i.name, this.esqueleto.inputs.append(n(iLabel + '<input type="' + i.type + '" name="' + iName + '" value="' + i.value + '" autocomplete="off" ' + iRequired + "/>" + fLabel))) }, this))); this.esqueleto.buttons = n('<div class="' + this.options.name + '-buttons"><\/div>'); this.esqueleto.form.append(this.esqueleto.buttons); i.form.active ? (this.esqueleto.form.attr("action", i.form.action === undefined ? "#" : i.form.action), this.esqueleto.form.attr("method", i.form.method === undefined ? "post" : i.form.method), this.options.form.active = !0) : (this.esqueleto.form.attr("action", "#"), this.esqueleto.form.attr("method", "post"), this.options.form.active = !1); i.type != "prompt" ? n.each(f, n.proxy(function (t, i) { i.type == "submit" ? this.esqueleto.buttons.append(n('<button type="submit" class="' + this.options.name + "-button-submit " + (i["class"] || "") + '">' + i.value + "<\/button>").bind("click", n.proxy(function (n) { this.close(i.value); n.preventDefault() }, this))) : i.type == "cancel" && this.esqueleto.buttons.append(n('<button type="button" class="' + this.options.name + "-button-cancel " + (i["class"] || "") + '">' + i.value + "<\/button>").bind("click", n.proxy(function (n) { this.close(!1); n.preventDefault() }, this))) }, this)) : i.type == "prompt" && n.each(f, n.proxy(function (t, i) { i.type == "submit" ? this.esqueleto.buttons.append(n('<button type="submit" class="' + this.options.name + "-button-submit " + (i["class"] || "") + '">' + i.value + "<\/button>").bind("click", n.proxy(function (t) { if (n('input[required="true"]:not(:value)').length > 0) n('input[required="true"]:not(:value):first').focus(), this.shake(); else { if (this.options.form.active) return !0; this.close(this.toArguments(n("input", this.esqueleto.inputs))) } t.preventDefault() }, this))) : i.type == "cancel" && this.esqueleto.buttons.append(n('<button type="button" class="' + this.options.name + "-button-cancel " + (i["class"] || "") + '">' + i.value + "<\/button>").bind("click", n.proxy(function (n) { this.close(!1); n.preventDefault() }, this))) }, this)); this.esqueleto.form.prepend(t); n.each(u, n.proxy(function (n, t) { this.esqueleto.wrapper.removeClass(this.options.name + "-" + t) }, this)); this.esqueleto.wrapper.addClass(this.options.name + "-" + i.type); this.moveBox(); this.visible = !0; this.overlay.show(); this.esqueleto.msgbox.css({ display: "block", left: (n(document).width() - this.options.width) / 2 }); this.moveBox(); setTimeout(n.proxy(function () { var t = n("input, button", this.esqueleto.msgbox); t.length && t.get(0).focus() }, this), this.options.moveDuration) }, this)); this.i++; this.i == 1 && this.esqueleto.msgbox.dequeue(this.options.name) }, toArguments: function (t) { return n.map(t, function (t) { return n(t).val() }) }, moveBox: function () { var i = { x: n(window).width(), y: n(window).height() }, t = { x: n(window).scrollLeft(), y: n(window).scrollTop() }, u = this.esqueleto.msgbox.outerHeight(), r = 0, f = 0; r = t.x + (i.x - this.options.width) / 2; f = this.options.emergefrom == "bottom" ? t.y + i.y + 80 : t.y - u - 80; this.visible ? (this.animation && this.animation.stop, this.animation = this.esqueleto.msgbox.animate({ left: r, top: t.y + (i.y - u) / 2 }, { duration: this.options.moveDuration, queue: !1, easing: "easeOutBackMin" })) : this.esqueleto.msgbox.css({ top: f, left: r }) }, close: function (t) { this.esqueleto.msgbox.css({ display: "none", top: 0 }); this.visible = !1; n.isFunction(this.callback) && this.callback.apply(this, n.makeArray(t)); setTimeout(n.proxy(function () { this.i--; this.esqueleto.msgbox.dequeue(this.options.name) }, this), this.options.closeDuration); this.i == 1 && this.overlay.hide(); this.moveBox(); this.esqueleto.form.empty() }, shake: function () { var f = this.options.shake.distance, n = this.options.shake.duration, t = this.options.shake.transition, e = this.options.shake.loops, r = this.esqueleto.msgbox.position().left, u = this.esqueleto.msgbox; for (i = 0; i < e; i++) u.animate({ left: r + f }, n, t), u.animate({ left: r - f }, n, t); u.animate({ left: r + f }, n, t); u.animate({ left: r }, n, t) } }, msgbox: function (t, i, r) { if (typeof t == "object") n.MsgBoxObject.config(t); else return n.MsgBoxObject.show(t, i, r) } }); n(function () { if (parseFloat(n.fn.jquery) > 1.2) n.MsgBoxObject.create(); else throw "The jQuery version that was loaded is too old. MsgBox requires jQuery 1.3+"; }) })(jQuery);
//# sourceMappingURL=jquery.msgbox.min.js.map